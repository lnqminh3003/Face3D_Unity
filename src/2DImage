import bpy 

bpy.ops.object.select_all(action='DESELECT')
for o in bpy.context.scene.objects:
    if o.name == "new_object_Minh":
        bpy.data.objects['new_object_Minh'].select_set(True)
        bpy.ops.object.delete()
        
import sys
packages_path=r"c:\users\le_nguyen_quang_minh\appdata\local\programs\python\python310\lib\site-packages"
sys.path.insert(0, packages_path )

import numpy as np

from PIL import Image
grey_img = Image.open("D:\Works\Face3D_Unity\Image\ImageTest2.jpg").convert('L')
grey_img.show()
max_size = (300,300)
max_height = 20
min_height = 0

grey_img.thumbnail(max_size)
imagenp = np.array(grey_img)
maxPix = imagenp.max()
minPix = imagenp.min()

(W,H) =  grey_img.size

vertices = []
edges =[]
faces = []

DX = 1
DY = 1

for Y in range(0,H,DY):
    for X in range(0,W,DX): 
        pixelIntensity = imagenp[Y][X]
        if(pixelIntensity < 0 ):
            Z = (pixelIntensity * min_height) / minPix
        else:
            Z = (pixelIntensity * max_height) / maxPix
        vertices.append((X,Y,Z))
        
for X in range(0,W-1,DX):
    for Y in range(0,H-1,DY):
        face_v1 = X + Y*W
        face_v2 = X + 1 + Y*W
        face_v3 = X + 1 + (Y+1)*W
        faces.append((face_v1,face_v2,face_v3))
        
        face_v1 = X +Y*W
        face_v2 = X +(Y+1)*W
        
        
        face_v3 = X+1+(Y+1)*W
        faces.append((face_v1,face_v2,face_v3))
        
new_mesh  = bpy.data.meshes.new("new_mesh")
new_mesh.from_pydata(vertices,edges,faces)
new_mesh.update()

# make object from mesh 
new_object = bpy.data.objects.new("new_object_Minh",new_mesh)

view_layer = bpy.context.view_layer
view_layer.active_layer_collection.collection.objects.link(new_object)